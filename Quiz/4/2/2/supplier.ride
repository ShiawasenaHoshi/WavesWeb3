{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
let NONE = "none"
func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
    num
}

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
        case a:String => a
        case _ => NONE
    }
    str
}

func getKeyItemPrice(item: String) = {
    item + "_price"
}

func getValueItemPrice(item: String) = {
    getNumberByKey(getKeyItemPrice(item))
}

func getKeyUserItemCounter(user: String, item: String) = {
    item + "_" + user + "_cnt"
}

func getValueUserItemCounter(user: String, item: String) = {
    getNumberByKey(getKeyUserItemCounter(user, item))
}

func getKeyItem(supplier: String, title: String) = {
    "item_" + toBase58String(sha256(toBytes(supplier + title)))
}

func getKeyItemData(item: String) = {
    item + "_data"
}

func getKeyItemSupplier(item: String) = {
    item + "_owner"
}

func getValueItemSupplier(item: String) = {
    getStrByKey(getKeyItemSupplier(item))
}

func getKeyBalanceSupplier(account: String) = {
    account + "_balance"
}

func getValueBalanceSupplier(account: String) = {
    getNumberByKey(getKeyBalanceSupplier(account))
}

@Callable(i)
func addItem(title: String, price: Int, data: String) = {
    let supplierAddress = toBase58String(i.caller.bytes)
    let item = getKeyItem(supplierAddress, title)
    if (price <= 0) then throw("purchase amount cannot be less than item price")
    else if (getValueItemSupplier(item) != NONE) then throw("an item is already exist")
    else {
        WriteSet([
            DataEntry(getKeyItemSupplier(item), supplierAddress),
            DataEntry(getKeyItemPrice(item), price),
            DataEntry(getKeyItemData(item), data)
        ])
    }
}