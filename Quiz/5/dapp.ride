{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let wEUR = base58'5tZBFrazBj2QtsPPRvx7FbPfPQqoqQ1y1jrnD9A1xux3'

@Callable(i)
func deposit() = {
    let pmt = extract(i.payment)
    if(pmt.assetId != wEUR) then throw("wEUR tokens only")
    else {
        let currentKey = toBase58String(i.caller.bytes)
        let currentAmount = match getInteger(this, currentKey) {
            case a:Int => a
            case _ => 0
        }
        let newAmount = currentAmount + pmt.amount
        WriteSet([DataEntry(currentKey, newAmount)])
    }
}

@Callable(i)
func withdraw(amount: Int) = {
    let currentKey = toBase58String(i.caller.bytes)
    let currentAmount = match getInteger(this, currentKey) {
        case a: Int => a
        case _ => 0
    }
    let newAmount = currentAmount - amount
    if (amount < 0) then throw("negative amount")
    else if(newAmount < 0) then throw("not enough balance")
    else ScriptResult(
        WriteSet([DataEntry(currentKey, newAmount)]),
        TransferSet([ScriptTransfer(i.caller, amount, wEUR)])
    )
}